{"version":3,"file":"react-css-modules.macro.mjs","sources":["../src/macro.js"],"sourcesContent":["const { createMacro } = require(\"babel-plugin-macros\");\nconst { name } = require(\"../package.json\");\n\nconst removeStyleNameAttr = path => {\n  path.node.openingElement.attributes = [\n    ...path.node.openingElement.attributes.filter(\n      attr => attr.name.name !== \"styleName\"\n    )\n  ];\n};\n\nconst findClassNameAttr = path => {\n  return path.node.openingElement.attributes.find(\n    attr => attr.name.name === \"className\"\n  );\n};\n\nconst createClassNameAttr = (t, value) => {\n  return t.JSXAttribute(t.jsxIdentifier(\"className\"), value);\n};\n\nconst getStyleNameAttrPayload = (t, styleNameAttr) => {\n  if (t.isStringLiteral(styleNameAttr.value)) {\n    if (!styleNameAttr.value.value) {\n      return undefined;\n    }\n    const stringValueReplacement = styleNameAttr.value.value\n      .split(\" \")\n      .map(val => t.stringLiteral(val));\n    if (stringValueReplacement.length > 1) {\n      return t.arrayExpression(stringValueReplacement);\n    }\n\n    if (stringValueReplacement[0]) {\n      return stringValueReplacement[0];\n    }\n\n    return undefined;\n  }\n\n  return styleNameAttr.value.expression;\n};\n\nconst visitor = (t, getStyleNameIdentifier) => ({\n  JSXElement(path) {\n    if (path.node.openingElement.attributes.length) {\n      const styleNameAttr = path.node.openingElement.attributes.find(\n        attr => attr.name.name === \"styleName\"\n      );\n      if (styleNameAttr) {\n        removeStyleNameAttr(path);\n        const styleNameAttrPayload = getStyleNameAttrPayload(t, styleNameAttr);\n\n        const styleNameExp = t.callExpression(getStyleNameIdentifier, [\n          ...[styleNameAttrPayload].filter(Boolean)\n        ]);\n        const classNameAttr = findClassNameAttr(path);\n\n        if (classNameAttr) {\n          if (styleNameAttrPayload) {\n            if (t.isJSXExpressionContainer(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\"+\", classNameAttr.value.expression, styleNameExp)\n              );\n            }\n\n            if (t.isStringLiteral(classNameAttr.value)) {\n              classNameAttr.value = t.JSXExpressionContainer(\n                t.binaryExpression(\"+\", classNameAttr.value, styleNameExp)\n              );\n            }\n          }\n\n          path.node.openingElement.attributes = [classNameAttr];\n        } else {\n          const newClassNameAttr = createClassNameAttr(\n            t,\n            t.JSXExpressionContainer(styleNameExp)\n          );\n          path.node.openingElement.attributes = [newClassNameAttr];\n        }\n      }\n    }\n  }\n});\n\nconst getStylesArgument = path => path.parent.arguments[0];\n\nconst myMacro = ({ references, babel }) => {\n  const { macro = [] } = references;\n  const { types: t } = babel;\n  macro.forEach(referencePath => {\n    const stylesArgument = getStylesArgument(referencePath);\n    stylesArgument.name = \"s\";\n    console.log(stylesArgument);\n    if (!stylesArgument) {\n      throw \"Styles map argument must be provided\";\n    }\n\n    const programPath = referencePath.findParent(parentPath =>\n      parentPath.isProgram()\n    );\n    referencePath.parentPath.remove();\n    const firstImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => t.isImportDeclaration(node));\n\n    const firstNonImportDeclarationNode = programPath\n      .get(\"body\")\n      .find(node => !t.isImportDeclaration(node));\n\n    const getStyleNameIdentifier = programPath.scope.generateUidIdentifier(\n      \"getStyleName\"\n    );\n\n    const bindStyleNames = programPath.scope.generateUidIdentifier(\"bindStyleNames\");\n    const helperImportDeclaration = t.importDeclaration(\n      [t.importDefaultSpecifier(bindStyleNames)],\n      t.stringLiteral(`${name}/dist/bindStyleName`)\n    );\n\n    const bindedStylesDeclaration = t.variableDeclaration(\"const\", [\n      t.variableDeclarator(\n        getStyleNameIdentifier,\n        t.callExpression(bindStyleNames, [stylesArgument])\n      )\n    ]);\n\n    firstImportDeclarationNode.insertBefore(helperImportDeclaration);\n    firstNonImportDeclarationNode.insertBefore(bindedStylesDeclaration);\n\n    programPath.traverse(visitor(t, getStyleNameIdentifier));\n  });\n}\n\n\n\nexport default createMacro(myMacro);\n"],"names":["createMacro","require","name","references","macro","t","babel","types","forEach","referencePath","stylesArgument","parent","arguments","console","log","programPath","findParent","parentPath","isProgram","remove","firstImportDeclarationNode","get","find","node","isImportDeclaration","firstNonImportDeclarationNode","getStyleNameIdentifier","scope","generateUidIdentifier","bindStyleNames","helperImportDeclaration","importDeclaration","importDefaultSpecifier","stringLiteral","bindedStylesDeclaration","variableDeclaration","variableDeclarator","callExpression","insertBefore","traverse","JSXElement","path","openingElement","attributes","length","styleNameAttr","attr","filter","removeStyleNameAttr","styleNameAttrPayload","isStringLiteral","value","stringValueReplacement","split","map","val","arrayExpression","expression","getStyleNameAttrPayload","styleNameExp","Boolean","classNameAttr","findClassNameAttr","isJSXExpressionContainer","JSXExpressionContainer","binaryExpression","newClassNameAttr","JSXAttribute","jsxIdentifier","createClassNameAttr","visitor"],"mappings":"yVAAQA,EAAgBC,QAAQ,uBAAxBD,YACAE,EAASD,QAAQ,mBAAjBC,oBAwIOF,EAjDC,oBAAGG,WACTC,MACOC,IAFcC,MAErBC,kBADQ,MAEVC,QAAQ,SAAAC,OACNC,EAAmCD,EANNE,OAAOC,UAAU,MAOpDF,EAAeR,KAAO,IACtBW,QAAQC,IAAIJ,IACPA,OACG,2CAGFK,EAAcN,EAAcO,WAAW,SAAAC,UAC3CA,EAAWC,cAEbT,EAAcQ,WAAWE,aACnBC,EAA6BL,EAChCM,IAAI,QACJC,KAAK,SAAAC,UAAQlB,EAAEmB,oBAAoBD,KAEhCE,EAAgCV,EACnCM,IAAI,QACJC,KAAK,SAAAC,UAASlB,EAAEmB,oBAAoBD,KAEjCG,EAAyBX,EAAYY,MAAMC,sBAC/C,gBAGIC,EAAiBd,EAAYY,MAAMC,sBAAsB,kBACzDE,EAA0BzB,EAAE0B,kBAChC,CAAC1B,EAAE2B,uBAAuBH,IAC1BxB,EAAE4B,wBAAiB/B,2BAGfgC,EAA0B7B,EAAE8B,oBAAoB,QAAS,CAC7D9B,EAAE+B,mBACAV,EACArB,EAAEgC,eAAeR,EAAgB,CAACnB,OAItCU,EAA2BkB,aAAaR,GACxCL,EAA8Ba,aAAaJ,GAE3CnB,EAAYwB,SAxFA,SAAClC,EAAGqB,SAA4B,CAC9Cc,oBAAWC,MACLA,EAAKlB,KAAKmB,eAAeC,WAAWC,OAAQ,KACxCC,EAAgBJ,EAAKlB,KAAKmB,eAAeC,WAAWrB,KACxD,SAAAwB,SAA2B,cAAnBA,EAAK5C,KAAKA,UAEhB2C,EAAe,EA9CG,SAAAJ,GAC1BA,EAAKlB,KAAKmB,eAAeC,aACpBF,EAAKlB,KAAKmB,eAAeC,WAAWI,OACrC,SAAAD,SAA2B,cAAnBA,EAAK5C,KAAKA,QA4ChB8C,CAAoBP,OACdQ,EA9BkB,SAAC5C,EAAGwC,MAC9BxC,EAAE6C,gBAAgBL,EAAcM,OAAQ,KACrCN,EAAcM,MAAMA,iBAGnBC,EAAyBP,EAAcM,MAAMA,MAChDE,MAAM,KACNC,IAAI,SAAAC,UAAOlD,EAAE4B,cAAcsB,YAC1BH,EAAuBR,OAAS,EAC3BvC,EAAEmD,gBAAgBJ,GAGvBA,EAAuB,GAClBA,EAAuB,iBAM3BP,EAAcM,MAAMM,WAWQC,CAAwBrD,EAAGwC,GAElDc,EAAetD,EAAEgC,eAAeX,IACjC,CAACuB,GAAsBF,OAAOa,WAE7BC,EA7CY,SAAApB,UACjBA,EAAKlB,KAAKmB,eAAeC,WAAWrB,KACzC,SAAAwB,SAA2B,cAAnBA,EAAK5C,KAAKA,OA2CQ4D,CAAkBrB,MAEpCoB,EACEZ,IACE5C,EAAE0D,yBAAyBF,EAAcV,SAC3CU,EAAcV,MAAQ9C,EAAE2D,uBACtB3D,EAAE4D,iBAAiB,IAAKJ,EAAcV,MAAMM,WAAYE,KAIxDtD,EAAE6C,gBAAgBW,EAAcV,SAClCU,EAAcV,MAAQ9C,EAAE2D,uBACtB3D,EAAE4D,iBAAiB,IAAKJ,EAAcV,MAAOQ,MAKnDlB,EAAKlB,KAAKmB,eAAeC,WAAa,CAACkB,OAClC,KACCK,EA1DY,SAAC7D,EAAG8C,UACvB9C,EAAE8D,aAAa9D,EAAE+D,cAAc,aAAcjB,GAyDnBkB,CACvBhE,EACAA,EAAE2D,uBAAuBL,IAE3BlB,EAAKlB,KAAKmB,eAAeC,WAAa,CAACuB,QAoDxBI,CAAQjE,EAAGqB"}